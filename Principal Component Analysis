clc
clear all
data=xlsread('Wine_quality.xlsx'); #UCI Repository Link: https://archive.ics.uci.edu/ml/datasets/wine+quality
[row,col]=size(data);
d=3;
 
%Step 1: Mean Calculation of features
for i=1:col
mu_fea(:,i)=mean(data(:,i));
end
mu_fea
data_1=zeros(row,col);

%Step 2: Replace x(i)
for i=1:col
        data_1(:,i)=data(:,i)-mu_fea(:,i)*ones(row,1);
end
data_1;

%Step 3: Standard deviation of the new data
for i=1:col
    sigma_1(:,i)=std(data_1(:,i));
end
sigma_1
 
%Step 4
for i=1:col
    data_1(:,i)=data_1(:,i)/sigma_1(:,i);
end
 
%Objective Function
O_func=zeros(col,col);
for i=1:row
    O_func=O_func+data_1(i,:)'*data_1(i,:);
end
O_func=O_func/row
size(O_func)
 
%Step 5: Eigen values and vectors
[Vec,Val]=eig(O_func)
 
for i=1:col
    for j=1:col
        if i==j
            E_val(i,2)=Val(i,j);
            E_val(i,1)=i;
        end
    end
end
 
E_val
sorted_E_val=sortrows(E_val,-2)
 
%Eigen vectors
for k=1:col
    E_vec(:,k)=Vec(:,sorted_E_val(k,1));
end
 
%Principal Components
E_vec(:,1:d)
 
%Variance provided by d Principal components
Var=sum(sorted_E_val(1:d,2))/sum(sorted_E_val(:,2));
Var=Var*100 %In percent
 
%Reduced Dataset
RD=data_1*E_vec(:,1:d);
 
%90 percent Target variance
Var_target=0;
count=0;
for i=1:col
    while Var_target<0.9
    count=count+1;
    Var_target=sum(sorted_E_val(1:i,2))/sum(sorted_E_val(:,2));
    VT(i,1)=count;
    VT(i,2)=Var_target;
    break
    end
end
VT
